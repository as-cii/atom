#!/usr/bin/env node

'use strict'

require('colors')
const async = require('async')
const childProcess = require('child_process')
const fs = require('fs')
const glob = require('glob')
const path = require('path')

const CONFIG = require('./config')

const appName = CONFIG.channel === 'beta' ? 'Atom Beta' : 'Atom'
const packagedAppPath = path.resolve(__dirname, '..', 'out', `${appName}.app`)
const executablePath = path.join(packagedAppPath, 'Contents', 'MacOS', appName)
const resourcePath = CONFIG.repositoryRootPath
const degreeOfParallelism = process.env.PARALLELISM || 1

function runCoreMainProcessTests (callback) {
  const testPath = path.join(CONFIG.repositoryRootPath, 'spec', 'main-process')
  const testArguments = [
    '--resource-path', resourcePath,
    '--test', '--main-process', testPath
  ]

  console.log('Executing core main process tests'.bold.green)
  const cp = childProcess.spawn(executablePath, testArguments, {stdio: 'inherit'})
  cp.on('error', error => { callback(error) })
  cp.on('close', exitCode => { callback(null, exitCode) })
}

const renderProcessTestSuites = []
const coreRendererProcessSpecPaths = glob.sync(path.join(CONFIG.repositoryRootPath, 'spec', '**', '*-spec.{coffee,js}'))
const partitionSize = Math.ceil(coreRendererProcessSpecPaths.length / degreeOfParallelism)
while (coreRendererProcessSpecPaths.length > 0) {
  const specPaths = coreRendererProcessSpecPaths.splice(0, partitionSize)
  renderProcessTestSuites.push(function (callback) {
    const testArguments = [
      '--resource-path', resourcePath,
      '--test'
    ].concat(specPaths)

    console.log(`Executing core render process tests`.bold.green)
    console.log(specPaths.map(p => path.basename(p)).join(',').gray);
    const cp = childProcess.spawn(executablePath, testArguments, {stdio: 'inherit'})
    cp.on('error', error => { callback(error) })
    cp.on('close', exitCode => { callback(null, exitCode) })
  })
}

// Build an array of functions, each running tests for a different bundled package
const packageTestSuites = []
for (let packageName in CONFIG.appMetadata.packageDependencies) {
  const packageSpecDirPath = path.join(CONFIG.repositoryRootPath, 'node_modules', packageName, 'spec')
  if (!fs.existsSync(packageSpecDirPath)) continue

  packageTestSuites.push(function (callback) {
    const testArguments = [
      '--resource-path', resourcePath,
      '--test', packageSpecDirPath
    ]

    console.log(`Executing ${packageName} tests`.bold.green)
    const cp = childProcess.spawn(executablePath, testArguments)
    let stderrOutput = ''
    cp.stderr.on('data', data => stderrOutput += data)
    cp.on('error', error => { callback(error) })
    cp.on('close', exitCode => {
      if (exitCode !== 0) {
        console.log(`Package tests failed for ${packageName}:`.red)
        console.log(stderrOutput)
      }
      callback(null, exitCode)
    })
  })
}

const testSuitesToRun = [runCoreMainProcessTests].concat(renderProcessTestSuites).concat(packageTestSuites)

async.parallelLimit(testSuitesToRun, degreeOfParallelism, function (err, exitCodes) {
  if (err) {
    console.error(err)
    process.exit(1)
  } else {
    const testsPassed = exitCodes.every(exitCode => exitCode === 0)
    process.exit(testsPassed ? 0 : 1)
  }
})
